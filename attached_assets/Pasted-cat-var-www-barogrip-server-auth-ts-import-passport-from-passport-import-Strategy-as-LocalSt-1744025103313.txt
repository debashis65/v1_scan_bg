cat /var/www/barogrip/server/auth.ts
import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import { Express, Request, Response, NextFunction } from "express";
import session from "express-session";
import * as crypto from "crypto";
import { promisify } from "util";
import { storage } from "./storage";
import { User as SelectUser } from "../shared/schema";
import { UserRole, SESSION_TIMEOUT_MINUTES } from "../shared/constants";

declare global {
  namespace Express {
    interface User extends SelectUser {}
  }
}

const scryptAsync = promisify(crypto.scrypt);

// Password hashing functions
async function hashPassword(password: string) {
  const salt = crypto.randomBytes(16).toString("hex");
  const buf = (await scryptAsync(password, salt, 64)) as Buffer;
  return `${buf.toString("hex")}.${salt}`;
}

async function comparePasswords(supplied: string, stored: string) {
  const [hashed, salt] = stored.split(".");
  const hashedBuf = Buffer.from(hashed, "hex");
  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;
  return crypto.timingSafeEqual(hashedBuf, suppliedBuf);
}

// Setup authentication for Express
// Middleware for route protection
export function isAuthenticated(req: Request, res: Response, next: NextFunction) {
  if (req.isAuthenticated()) {
    return next();
  }
  res.status(401).json({ message: "Authentication required" });
}

// Role-based access control middleware
export function hasRole(role: UserRole | UserRole[]) {
  return async (req: Request, res: Response, next: NextFunction) => {
    if (!req.isAuthenticated() || !req.user) {
      return res.status(401).json({ message: "Authentication required" });
    }
    
    const roles = Array.isArray(role) ? role : [role];
    const userRole = req.user.role;
    
    if (!roles.includes(userRole as UserRole)) {
      return res.status(403).json({ 
        message: "You don't have permission to access this resource"
      });
    }
    
    next();
  };
}

// Token-based access validation for encrypted resources
export function validateResourceToken(req: Request, res: Response, next: NextFunction) {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) {
    return res.status(401).json({ message: "Resource access token required" });
  }
  
  // In a real implementation, you would validate the token against a database
  // For now, we'll just pass it through
  req.body.accessToken = token;
  next();
}

export function setupAuth(app: Express) {
  const sessionSettings: session.SessionOptions = {
    secret: process.env.SESSION_SECRET || "barogrip-session-secret",
    resave: false,
    saveUninitialized: false,
    store: storage.sessionStore,
    cookie: {
      secure: process.env.NODE_ENV === "production",
      maxAge: 1000 * 60 * SESSION_TIMEOUT_MINUTES, // Convert minutes to milliseconds
      httpOnly: true,
      sameSite: 'lax'
    },
  };

  app.set("trust proxy", 1);
  app.use(session(sessionSettings));
  app.use(passport.initialize());
  app.use(passport.session());

  // Configure local strategy
  passport.use(
    new LocalStrategy(
      {
        usernameField: "email",
        passwordField: "password",
      },
      async (email, password, done) => {
        try {
          const user = await storage.getUserByEmail(email);
          if (!user || !(await comparePasswords(password, user.password))) {
            return done(null, false, { message: "Incorrect email or password" });
          }
          return done(null, user);
        } catch (err) {
          return done(err);
        }
      }
    )
  );

  // Serialize and deserialize user
  passport.serializeUser((user, done) => done(null, user.id));
  passport.deserializeUser(async (id: number, done) => {
    try {
      const user = await storage.getUser(id);
      done(null, user);
    } catch (err) {
      done(err);
    }
  });

  // Authentication routes
  app.post("/api/register", async (req, res, next) => {
    try {
      // Check if email already exists
      const existingEmail = await storage.getUserByEmail(req.body.email);
      if (existingEmail) {
        return res.status(400).json({ message: "Email already in use" });
      }

      // Check if username already exists
      const existingUsername = await storage.getUserByUsername(req.body.username);
      if (existingUsername) {
        return res.status(400).json({ message: "Username already in use" });
      }

      // Create new user
      const user = await storage.createUser({
        ...req.body,
        password: await hashPassword(req.body.password),
      });

      // Create profile based on role
      if (req.body.role === "patient") {
        await storage.createPatientProfile({
          userId: user.id,
          age: req.body.age,
          gender: req.body.gender,
          height: req.body.height,
          weight: req.body.weight,
          shoeSize: req.body.shoeSize,
          shoeSizeUnit: req.body.shoeSizeUnit,
          usedOrthopedicInsoles: req.body.usedOrthopedicInsoles,
          hasDiabetes: req.body.hasDiabetes,
          hasHeelSpur: req.body.hasHeelSpur,
          footPain: req.body.footPain,
        });
      } else if (req.body.role === "doctor") {
        await storage.createDoctorProfile({
          userId: user.id,
          specialty: req.body.specialty,
          license: req.body.license,
          hospital: req.body.hospital,
          bio: req.body.bio,
        });
      }

      // Log the user in
      req.login(user, (err) => {
        if (err) return next(err);
        // Return user without password
        const { password, ...userWithoutPassword } = user;
        res.status(201).json(userWithoutPassword);
      });
    } catch (error) {
      next(error);
    }
  });

  app.post("/api/login", (req, res, next) => {
    passport.authenticate("local", (err: any, user: any, info: any) => {
      if (err) return next(err);
      if (!user) {
        return res.status(401).json({ message: info.message || "Authentication failed" });
      }
      
      // Create a secure session token
      const sessionToken = crypto.randomBytes(64).toString('hex');
      const expiry = new Date();
      expiry.setMinutes(expiry.getMinutes() + SESSION_TIMEOUT_MINUTES);
      
      // Update user with session token
      storage.updateUserSession(user.id, sessionToken, expiry)
        .then(() => {
          req.login(user, (err) => {
            if (err) return next(err);
            // Return user without password
            const { password, ...userWithoutPassword } = user;
            res.json({
              ...userWithoutPassword,
              sessionTokenExpiry: expiry
            });
          });
        })
        .catch(next);
    })(req, res, next);
  });

  app.post("/api/logout", isAuthenticated, async (req, res, next) => {
    try {
      // Clear the session token in the database
      if (req.user) {
        await storage.clearUserSession(req.user.id);
      }
      
      // Destroy the session
      req.logout((err) => {
        if (err) return next(err);
        req.session.destroy((err) => {
          if (err) return next(err);
          res.clearCookie('connect.sid');
          res.status(200).json({ message: "Logged out successfully" });
        });
      });
    } catch (error) {
      next(error);
    }
  });

  app.get("/api/user", (req, res) => {
    if (!req.isAuthenticated() || !req.user) {
      return res.status(401).json({ message: "Not authenticated" });
    }
    // Return user without password
    const { password, ...userWithoutPassword } = req.user;
    res.json(userWithoutPassword);
  });

  // Password reset route
  app.post("/api/forgot-password", async (req, res, next) => {
    try {
      const { email } = req.body;
      const user = await storage.getUserByEmail(email);
      
      // Always return success even if email doesn't exist (security best practice)
      if (!user) {
        return res.status(200).json({ message: "If an account with that email exists, a password reset link has been sent." });
      }

      // In a real implementation, you would generate a token, store it, and send an email
      // For now, we'll just acknowledge the request
      res.status(200).json({ 
        message: "If an account with that email exists, a password reset link has been sent."
      });
    } catch (error) {
      next(error);
    }
  });
}

// Export hash function for use elsewhere
export { hashPassword };