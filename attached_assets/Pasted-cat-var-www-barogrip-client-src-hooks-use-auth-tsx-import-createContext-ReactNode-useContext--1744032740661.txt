cat /var/www/barogrip/client/src/hooks/use-auth.tsx
import { createContext, ReactNode, useContext, useState, useEffect } from 'react';
import { useMutation, UseMutationResult } from '@tanstack/react-query';
import { useNavigate } from 'react-router-dom';
import { apiRequest, queryClient } from '../lib/query-client';
import { useToast } from '../providers/toast-provider';

// Type definitions for user
interface User {
  id: number;
  username: string;
  email: string;
  role: 'patient' | 'doctor' | 'admin';
}

type AuthContextType = {
  user: User | null;
  isLoading: boolean;
  error: Error | null;
  loginMutation: UseMutationResult<User, Error, LoginData>;
  logoutMutation: UseMutationResult<void, Error, void>;
  registerMutation: UseMutationResult<User, Error, RegisterData>;
};

interface LoginData {
  email: string;
  password: string;
}

interface RegisterData {
  username: string;
  email: string;
  password: string;
}

const AuthContext = createContext<AuthContextType | null>(null);

export function AuthProvider({ children }: { children: ReactNode }) {
  const { toast } = useToast();
  const navigate = useNavigate();
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);

  // Fetch user data on mount
  useEffect(() => {
    async function fetchUser() {
      try {
        const response = await fetch('/api/user', {
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include',
        });

        if (response.status === 401) {
          setUser(null);
          setIsLoading(false);
          return;
        }

        if (!response.ok) {
          throw new Error('Failed to fetch user data');
        }

        const userData = await response.json();
        setUser(userData);
      } catch (err) {
        setError(err instanceof Error ? err : new Error('An unknown error occurred'));
      } finally {
        setIsLoading(false);
      }
    }

    fetchUser();
  }, []);

  const loginMutation = useMutation({
    mutationFn: async (credentials: LoginData) => {
      const res = await apiRequest('POST', '/api/login', credentials);
      return await res.json();
    },
    onSuccess: (userData: User) => {
      setUser(userData);
      toast({
        title: 'Login successful',
        description: `Welcome back, ${userData.username}!`,
        variant: 'success',
      });
      navigate('/');
    },
    onError: (err: Error) => {
      toast({
        title: 'Login failed',
        description: err.message || 'Invalid username or password',
        variant: 'destructive',
      });
    },
  });

  const registerMutation = useMutation({
    mutationFn: async (data: RegisterData) => {
      const res = await apiRequest('POST', '/api/register', data);
      return await res.json();
    },
    onSuccess: (userData: User) => {
      setUser(userData);
      toast({
        title: 'Registration successful',
        description: `Welcome, ${userData.username}!`,
        variant: 'success',
      });
      navigate('/');
    },
    onError: (err: Error) => {
      toast({
        title: 'Registration failed',
        description: err.message,
        variant: 'destructive',
      });
    },
  });

  const logoutMutation = useMutation({
    mutationFn: async () => {
      await apiRequest('POST', '/api/logout');
    },
    onSuccess: () => {
      setUser(null);
      toast({
        title: 'Logged out successfully',
        variant: 'success',
      });
      navigate('/auth');
    },
    onError: (err: Error) => {
      toast({
        title: 'Logout failed',
        description: err.message,
        variant: 'destructive',
      });
    },
  });

  return (
    <AuthContext.Provider
      value={{
        user,
        isLoading,
        error,
        loginMutation,
        logoutMutation,
        registerMutation,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}